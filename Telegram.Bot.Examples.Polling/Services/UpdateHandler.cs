using Dapper;
using Microsoft.VisualBasic;
using System.Data.SqlClient;
using System.Net;
using System.Numerics;
using System.Threading;
using Telegram.Bot.Examples.Polling.Files;
using Telegram.Bot.Examples.Polling.Games;
using Telegram.Bot.Examples.Polling.Helpers;
using Telegram.Bot.Examples.Polling.MethodsDB;
using Telegram.Bot.Examples.Polling.Models;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Polling;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.InlineQueryResults;
using Telegram.Bot.Types.ReplyMarkups;

namespace Telegram.Bot.Services;

public class UpdateHandler : IUpdateHandler
{
    private readonly ITelegramBotClient _botClient;
    private readonly ILogger<UpdateHandler> _logger;
    private static SqlConnectionStringBuilder ConnectionString = new SqlConnectionStringBuilder(@"Data Source=.\SQLEXPRESS;Initial Catalog=ChigurDB;Integrated Security=True");
    private static string BotToken = "5721215311:AAE79QD4Esi1TxpYUl8j1BQ3RVWCVdUXAQ4";

    public UpdateHandler(ITelegramBotClient botClient, ILogger<UpdateHandler> logger)
    {
        _botClient = botClient;
        _logger = logger;
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —É–≤–∏–¥–µ–ª –±–æ—Ç.
    /// –ù–∞ –≤—Ö–æ–¥–µ –ø—Ä–æ–≤–µ—Ä—è—Ç —Ç–∏–ø –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    /// Message - –æ–±—ã—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
    /// CallbackQuery - –æ—Ç–≤–µ—Ç –Ω–∞ –∫–Ω–æ–ø—É, —Å–æ–∑–¥–∞–Ω–Ω—É—é –∫–ª–∞—Å—Å–æ–º InlineKeyboardButton.
    /// </summary>
    /// <param name="_"></param>
    /// <param name="update"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    public async Task HandleUpdateAsync(ITelegramBotClient _, Update update, CancellationToken cancellationToken)
    {
        var handler = update switch
        {
            { Message: { } message }                         => BotOnMessageReceived(message, cancellationToken),
            //{ EditedMessage: { } message }                 => BotOnMessageReceived(message, cancellationToken),
            { CallbackQuery: { } callbackQuery }             => BotOnCallbackQueryReceived(callbackQuery, cancellationToken),
            //{ InlineQuery: { } inlineQuery }               => BotOnInlineQueryReceived(inlineQuery, cancellationToken),
            //{ ChosenInlineResult: { } chosenInlineResult } => BotOnChosenInlineResultReceived(chosenInlineResult, cancellationToken),
            _                                                => UnknownUpdateHandlerAsync(update, cancellationToken)
        };

        await handler;
    }

    /// <summary>
    /// –ú–µ—Ç–æ–¥ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏, –¥–∞–ª–µ–µ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å '/', –ø—Ä–∏ –ø–æ–º–æ—â–∏ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ switch –≤—ã–±–∏—Ä–∞–µ—Ç—Å—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–π –º–µ—Ç–æ–¥.
    /// </summary>
    /// <param name="message"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    /// <exception cref="IndexOutOfRangeException"></exception>
    private async Task BotOnMessageReceived(Message message, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Receive message type: {MessageType}", message.Type);
        if (message.Text is not { } messageText)
            return;

        if (message.Text.StartsWith("/"))
        {
            var action = messageText.Replace("@UniversalSigma_bot", "").Split(' ')[0] switch
            {
                "/start"             => Start(_botClient, message, cancellationToken),
                "/iwannaplay"        => IWannaPlay(_botClient, message, cancellationToken),
                "/suicide"           => Suicide(_botClient, message, cancellationToken),
                "/mystat"            => PlayerStat(_botClient, message, cancellationToken),
                _                    => Default(_botClient, message, cancellationToken)
                //"/inline_keyboard" => SendInlineKeyboard(_botClient, message, cancellationToken),
                //"/keyboard"        => SendReplyKeyboard(_botClient, message, cancellationToken),
                //"/remove"          => RemoveKeyboard(_botClient, message, cancellationToken),
                //"/photo"           => SendFile(_botClient, message, cancellationToken),
                //"/request"         => RequestContactAndLocation(_botClient, message, cancellationToken),
                //"/inline_mode"     => StartInlineQuery(_botClient, message, cancellationToken),
                //"/throw"           => FailingHandler(_botClient, message, cancellationToken),
                //_                  => Usage(_botClient, message, cancellationToken)
            };;
            Message sentMessage = await action;
            _logger.LogInformation("The message was sent with id: {SentMessageId}", sentMessage.MessageId);
        }
        else
        {
            if(PlayerHelper.IsPlaying(message))
            {
                InteractWithPlayer.UpdateRankPlayer(message.From.Id, 1, "+");
            }
            
        }
        #region Chigur Tasks

        static async Task<Message> Start(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            return await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –°–∏–≥–º–∞ –±–æ—Ç, –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å –≤—Å–µ—Ö —Å–∏–≥–º.",
                replyMarkup: new ReplyKeyboardRemove(),
                cancellationToken: cancellationToken);
        }

        static async Task<Message> IWannaPlay(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            if(PlayerHelper.IsPlaying(message))
            {
                InteractWithPlayer.AddPlayer(message);
                await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"‚ùó–ò–≥—Ä–æ–∫ \"{message.From.FirstName}\" –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∂–µ—Ä—Ç–≤ –ß–∏–≥—É—Ä–∞!",
                    cancellationToken: cancellationToken);

                var newPlayer = InteractWithPlayer.GetPlayers($"where User_id={message.From.Id}")[0];
                return await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"üìù–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {message.From.FirstName}:\n" +
                                $"ü§†–ò–º—è: {newPlayer.Name}\n" +
                                $"üíä–ó–¥–æ—Ä–æ–≤—å–µ: {newPlayer.Health}\n" +
                                $"üèÜ–†–µ–π—Ç–∏–Ω–≥: {newPlayer.Rank}",
                    cancellationToken: cancellationToken);
            }
            else
                return await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"–ò–≥—Ä–æ–∫ \"{message.From.FirstName}\" —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –∂–µ—Ä—Ç–≤ –ß–∏–≥—É—Ä–∞.",
                    cancellationToken: cancellationToken);

        }

        static async Task<Message> Default(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            if (PlayerHelper.IsPlaying(message))
            {
                return await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"\"{message.From.FirstName}\", —Ç—ã –Ω–µ –≤ –∏–≥—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /iwannaplay, –ø–æ–ø—Ä–æ–±—É–π –æ–±—ã–≥—Ä–∞—Ç—å –ø–æ–≤–µ–ª–∏—Ç–µ–ª—è –°–∏–≥–º!",
                    cancellationToken: cancellationToken);
            }

            InlineKeyboardMarkup inlineKeyboard = new(new[]
            {
                new []
                {
                    InlineKeyboardButton.WithCallbackData(text: "–û—Ä—ë–ª", callbackData: $"0,/flipCoin,{message.From.Id}"),
                    InlineKeyboardButton.WithCallbackData(text: "–†–µ—à–∫–∞", callbackData: $"1,/flipCoin,{message.From.Id}"),
                },
            });

            return await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: $"\"{message.From.FirstName}\", –º–Ω–µ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª—Å—è —Ç–≤–æ–π –≤–∑–≥–ª—è–¥. –¢–µ–ø–µ—Ä—å —Ç—ã –≤—ã–Ω—É–∂–¥–µ–Ω –±—Ä–æ—Å–∏—Ç—å –º–æ–Ω–µ—Ç—É. –ö–∞–∫—É—é —Å—Ç–æ—Ä–æ–Ω—É –≤—ã–±–µ—Ä–µ—à—å?",
                replyMarkup: inlineKeyboard,
                cancellationToken: cancellationToken);
        }
        static async Task<Message> Suicide(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            if (PlayerHelper.IsPlaying(message))
            {
                return await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"\"{message.From.FirstName}\", —Ç—ã –Ω–µ –≤ –∏–≥—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /iwannaplay, –ø–æ–ø—Ä–æ–±—É–π –æ–±—ã–≥—Ä–∞—Ç—å –ø–æ–≤–µ–ª–∏—Ç–µ–ª—è –°–∏–≥–º!",
                    cancellationToken: cancellationToken);
            }
            InteractWithPlayer.DeletePlayer(message.From.Id);
            TelegramAPI.SendGif(message.Chat.Id, GIFs.Suicide);
            await Task.Delay(2000);
            return await botClient.SendTextMessageAsync(
                                chatId: message.Chat.Id,
                                text: $"–ò–≥—Ä–æ–∫ {message.From.FirstName} –æ–±–æ—Å—Å–∞–Ω –∏ —Å–ª–∏—Ç.üíÄ",
                                cancellationToken: cancellationToken);
        }
        static async Task<Message> PlayerStat(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            var playerStat = InteractWithPlayer.GetStatisticPlayer(message.From.Id);
            if (playerStat.Count == 0)
            {
                return await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"\"{message.From.FirstName}\", —Ç—ã –Ω–µ –≤ –∏–≥—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /iwannaplay, –ø–æ–ø—Ä–æ–±—É–π –æ–±—ã–≥—Ä–∞—Ç—å –ø–æ–≤–µ–ª–∏—Ç–µ–ª—è –°–∏–≥–º!",
                    cancellationToken: cancellationToken);
            }
            return await botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: $"üìù–¢–µ–∫—É—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–∞ {message.From.FirstName}:\n" +
                                $"ü§†–ò–º—è: {playerStat[0].Name}\n" +
                                $"üíä–ó–¥–æ—Ä–æ–≤—å–µ: {playerStat[0].Health}\n" +
                                $"üèÜ–†–µ–π—Ç–∏–Ω–≥: {playerStat[0].Rank}\n" +
                                $"\n" +
                                $"üìî–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n" +
                                $"üåü–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥: {playerStat[0].Statistics.MaxRank}\n" +
                                $"üíÄ–ö–æ–ª-–≤–æ —Å–º–µ—Ä—Ç–µ–π: {playerStat[0].Statistics.DeathCount}",
                    cancellationToken: cancellationToken);
        }
        #endregion

        #region –ü—Ä–∏–º–µ—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        // Send inline keyboard
        // You can process responses in BotOnCallbackQueryReceived handler

        static async Task<Message> SendInlineKeyboard(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            await botClient.SendChatActionAsync(
                chatId: message.Chat.Id,
                chatAction: ChatAction.Typing,
                cancellationToken: cancellationToken);

            // Simulate longer running task
            await Task.Delay(500, cancellationToken);

            InlineKeyboardMarkup inlineKeyboard = new(
                new[]
                {
                    // first row
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData("1.1", "11"),
                        InlineKeyboardButton.WithCallbackData("1.2", "12"),
                    },
                    // second row
                    new []
                    {
                        InlineKeyboardButton.WithCallbackData("2.1", "21"),
                        InlineKeyboardButton.WithCallbackData("2.2", "22"),
                    },
                });

            return await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "Choose",
                replyMarkup: inlineKeyboard,
                cancellationToken: cancellationToken);
        }

        static async Task<Message> SendReplyKeyboard(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            ReplyKeyboardMarkup replyKeyboardMarkup = new(
                new[]
                {
                        new KeyboardButton[] { "1.1", "1.2" },
                        new KeyboardButton[] { "2.1", "2.2" },
                })
            {
                ResizeKeyboard = true
            };

            return await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "Choose",
                replyMarkup: replyKeyboardMarkup,
                cancellationToken: cancellationToken);
        }

        static async Task<Message> RemoveKeyboard(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            return await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "Removing keyboard",
                replyMarkup: new ReplyKeyboardRemove(),
                cancellationToken: cancellationToken);
        }

        static async Task<Message> SendFile(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            await botClient.SendChatActionAsync(
                message.Chat.Id,
                ChatAction.UploadPhoto,
                cancellationToken: cancellationToken);

            const string filePath = "Files/tux.png";
            await using FileStream fileStream = new(filePath, FileMode.Open, FileAccess.Read, FileShare.Read);
            var fileName = filePath.Split(Path.DirectorySeparatorChar).Last();

            return await botClient.SendPhotoAsync(
                chatId: message.Chat.Id,
                photo: new InputFile(fileStream, fileName),
                caption: "Nice Picture",
                cancellationToken: cancellationToken);
        }

        static async Task<Message> RequestContactAndLocation(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            ReplyKeyboardMarkup RequestReplyKeyboard = new(
                new[]
                {
                    KeyboardButton.WithRequestLocation("Location"),
                    KeyboardButton.WithRequestContact("Contact"),
                });

            return await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "Who or Where are you?",
                replyMarkup: RequestReplyKeyboard,
                cancellationToken: cancellationToken);
        }

        static async Task<Message> Usage(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            const string usage = "Usage:\n" +
                                 "/inline_keyboard - send inline keyboard\n" +
                                 "/keyboard    - send custom keyboard\n" +
                                 "/remove      - remove custom keyboard\n" +
                                 "/photo       - send a photo\n" +
                                 "/request     - request location or contact\n" +
                                 "/inline_mode - send keyboard with Inline Query";

            return await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: usage,
                replyMarkup: new ReplyKeyboardRemove(),
                cancellationToken: cancellationToken);
        }

        static async Task<Message> StartInlineQuery(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            InlineKeyboardMarkup inlineKeyboard = new(
                InlineKeyboardButton.WithSwitchInlineQueryCurrentChat("Inline Mode"));

            return await botClient.SendTextMessageAsync(
                chatId: message.Chat.Id,
                text: "Press the button to start Inline Query",
                replyMarkup: inlineKeyboard,
                cancellationToken: cancellationToken);
        }

#pragma warning disable RCS1163 // Unused parameter.
#pragma warning disable IDE0060 // Remove unused parameter
        static Task<Message> FailingHandler(ITelegramBotClient botClient, Message message, CancellationToken cancellationToken)
        {
            throw new IndexOutOfRangeException();
        }
#pragma warning restore IDE0060 // Remove unused parameter
#pragma warning restore RCS1163 // Unused parameter.
        #endregion
    }

    /// <summary>
    /// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–ª–±—ç–∫–æ–≤ –æ—Ç –Ω–∞–∂–∞—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫
    /// </summary>
    /// <param name="callbackQuery"></param>
    /// <param name="cancellationToken"></param>
    /// <returns></returns>
    private async Task BotOnCallbackQueryReceived(CallbackQuery callbackQuery, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Received inline keyboard callback from: {CallbackQueryId}", callbackQuery.Id);

        string[] data = callbackQuery.Data.Split(",");
        string value = data[0].Trim();
        string method = data[1].Trim();
        long whoseCoin = Convert.ToInt64(data[2].Trim());

        if (method.StartsWith("/"))
        {
            switch (method)
            {
                case "/flipCoin":
                    {
                        await _botClient.DeleteMessageAsync(
                            chatId: callbackQuery.Message.Chat.Id,
                            messageId: callbackQuery.Message.MessageId);

                        if(whoseCoin != callbackQuery.From.Id)
                        {
                            await _botClient.SendTextMessageAsync(
                                chatId: callbackQuery.Message.Chat.Id,
                                text: $"\"{callbackQuery.From.FirstName}\", –Ω–µ —Å—Ç–æ–∏—Ç –≤–º–µ—à–∏–≤–∞—Ç—å—Å—è –Ω–µ –≤ —Å–≤–æ–µ –¥–µ–ª–æ.",
                                cancellationToken: cancellationToken);
                            await Task.Delay(2000);
                            await _botClient.SendTextMessageAsync(
                                chatId: callbackQuery.Message.Chat.Id,
                                text: "–°—ç—Ä, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –¥–≤–∏–≥–∞–π—Ç–µ—Å—å.",
                                cancellationToken: cancellationToken);
                            TelegramAPI.SendGif(callbackQuery.Message.Chat.Id, GIFs.PleaseDontMove);
                            await Task.Delay(2000);

                            InteractWithPlayer.DeletePlayer(callbackQuery.From.Id);

                            //TODO –≠—Ç—É —Ö—É–π–Ω—é –Ω–∞–¥–æ —É–±—Ä–∞—Ç—å, —Ç.–∫. –≤ —Å–ª—É—á–∞–µ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Å–æ–±—ã—Ç–∏–µ —Å –ø–æ—Å–ª–µ–¥—É—é—â–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
                            await _botClient.SendTextMessageAsync(
                                chatId: callbackQuery.Message.Chat.Id,
                                text: $"–ò–≥—Ä–æ–∫ {callbackQuery.From.FirstName} —É–±–∏—Ç.üíÄ",
                                cancellationToken: cancellationToken);
                            break;
                        }

                        TelegramAPI.SendGif(callbackQuery.Message.Chat.Id, GIFs.CoinFlip);
                        await Task.Delay(3000);
                        int coinSide = Convert.ToInt32(value);
                        if (Games.CoinFlip(coinSide))
                        {
                            await _botClient.SendTextMessageAsync(
                                chatId: callbackQuery.Message.Chat.Id,
                                text: "–ñ–µ–ª–∞—é —Ö–æ—Ä–æ—à–µ–≥–æ –¥–Ω—è.üôå",
                                cancellationToken: cancellationToken);
                            TelegramAPI.SendGif(callbackQuery.Message.Chat.Id, GIFs.PlayerWin);
                        }
                        else
                        {
                            await _botClient.SendTextMessageAsync(
                                chatId: callbackQuery.Message.Chat.Id,
                                text: "–ú–Ω–µ –∂–∞–ª—å...üî™",
                                cancellationToken: cancellationToken);
                            await Task.Delay(1000);
                            TelegramAPI.SendGif(callbackQuery.Message.Chat.Id, GIFs.PlayerLose);
                            InteractWithPlayer.DeletePlayer(callbackQuery.From.Id);

                            //TODO –≠—Ç—É —Ö—É–π–Ω—é –Ω–∞–¥–æ —É–±—Ä–∞—Ç—å, —Ç.–∫. –≤ —Å–ª—É—á–∞–µ —Å–º–µ—Ä—Ç–∏ –∏–≥—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–æ –≤—ã–∑—ã–≤–∞—Ç—å—Å—è —Å–æ–±—ã—Ç–∏–µ
                            await _botClient.SendTextMessageAsync(
                                chatId: callbackQuery.Message.Chat.Id,
                                text: $"–ò–≥—Ä–æ–∫ {callbackQuery.From.FirstName} —É–±–∏—Ç.üíÄ",
                                cancellationToken: cancellationToken);
                        }
                        break;
                    }
            }
        }


        //await _botClient.AnswerCallbackQueryAsync(
        //    callbackQueryId: callbackQuery.Id,
        //    text: $"Received {callbackQuery.Data}",
        //    cancellationToken: cancellationToken);

        //await _botClient.SendTextMessageAsync(
        //    chatId: callbackQuery.Message!.Chat.Id,
        //    text: $"Received {callbackQuery.Data}",
        //    cancellationToken: cancellationToken);
    }

    #region Inline Mode

    private async Task BotOnInlineQueryReceived(InlineQuery inlineQuery, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Received inline query from: {InlineQueryFromId}", inlineQuery.From.Id);

        InlineQueryResult[] results = {
            // displayed result
            new InlineQueryResultArticle(
                id: "1",
                title: "TgBots",
                inputMessageContent: new InputTextMessageContent("hello"))
        };

        await _botClient.AnswerInlineQueryAsync(
            inlineQueryId: inlineQuery.Id,
            results: results,
            cacheTime: 0,
            isPersonal: true,
            cancellationToken: cancellationToken);
    }

    private async Task BotOnChosenInlineResultReceived(ChosenInlineResult chosenInlineResult, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Received inline result: {ChosenInlineResultId}", chosenInlineResult.ResultId);

        await _botClient.SendTextMessageAsync(
            chatId: chosenInlineResult.From.Id,
            text: $"You chose result with Id: {chosenInlineResult.ResultId}",
            cancellationToken: cancellationToken);
    }

    #endregion

    private Task UnknownUpdateHandlerAsync(Update update, CancellationToken cancellationToken)
    {
        _logger.LogInformation("Unknown update type: {UpdateType}", update.Type);
        return Task.CompletedTask;
    }

    public async Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
    {
        var ErrorMessage = exception switch
        {
            ApiRequestException apiRequestException => $"Telegram API Error:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}",
            _ => exception.ToString()
        };

        _logger.LogInformation("HandleError: {ErrorMessage}", ErrorMessage);

        // Cooldown in case of network connection error
        if (exception is RequestException)
            await Task.Delay(TimeSpan.FromSeconds(2), cancellationToken);
    }
}
